스프링 부트 (spring boot )

1. 환경설정

  - JDK 11
  - springboot 2.7.8  ( 2.6 기점으로 많이 변경 )
  - sts 3.9.14
  - mysql + mybatis

2. boot프로젝트 생성

   가. 웹사이트 이용 ( initializer 이용 )
  
       https://start.spring.io

       자바, 서블릿/jsp, springframe
         - 비웹환경: jar
	 - 웹환경:  war 

       springboot
         - jar ( 웹환경인 경우 war 가능 )
           웹을 jar로 실행가능한 이유가 tomcat을 내장이 가능하다.

        initializer 정보지정하고 Generate 버튼 선택하면 다운로드 됨. ( demo.zip )
	workspace에 복사하고 압축해제.
	sts에서 import > maven > existing maven project > workspace에서 demo 폴더선택 > finish

   나. sts에서 로컬 이용

        file > new > spring starter project 선택

        * 기존 spring framework은 spring legacy project 선택.


3. boot 프로젝트 구조

    가. spring framework
	- 필요한 의존성을 개별적으로 설정했음.
	 예> DB 연동시 최소한 5개의 의존성 설정 ==> 거의 모두 필요한 의존성들이다.

    나. springboot
        - 거의 필요한 의존성 파일들을 묶어서 제공 ==> starter 개념이다.


    다. boot 기본적인 의존성

                <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>  ==> 비 웹 어플리케이션 개발용
			<artifactId>spring-boot-starter-web</artifactId>  ==> 웹 어플리케이션 개발용 (tomcat내장설치됨, jackson 포함,.... )
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

     라. src/main/java
        ==> 프로젝트 생성시 자동으로 생성해주는 빈
	==> 웹 및 비웹 환경에서 무조건 있어야 된다.
            이유는 시작점이다.
	==> 웹 어플리케이션이라도 jar 배포가 가능한 이유이다.

	@SpringBootApplication
	public class DemoApplication {

		public static void main(String[] args) {
			SpringApplication.run(DemoApplication.class, args);
		}

	}
        
	* @SpringBootApplication 는 다음과 같은   3가지 어노테이션을 포함한다. 

	  @SpringBootConfiguration ==> 추가적인 configuration 설정이 가능 ( 이전 프레임워크에서 멀티 xml 사용한 방식과 유사 )
	                               @Configuration 으로 추가 configuration 지정이 가능.
	  @EnableAutoConfiguration ==> starter-xxx 지정하면 거의 자동으로 configuration 설정된다.
	  @ComponentScan ==> 자동으로 빈생성 ( 프레임워크의 <context:component-scan> 동일 기능 )
                           앞으로 생성할 빈들은 반드시 XXXApplication 이 가진 패키지의 하위 패키지로 만들어야 
			   자동으로 scan되어 생성될 수 있다.
			   예> com.example.dao
			       com.example.controller
			       ..

    마. xml 지원 안함.
       - 이전 프레임워크에서는 xml에 설정정보를 설정했음.
       - boot에서는 src/main/resource 의 application.properties 대신한다.
       - application.properties 대신에 application.yml 사용 가능 ( yml을 '야물' 파일이라고 부른다. )

         application.properties 사용
	 예> key.key2.key3=값
	     key.xxx.yyy=값

          pplication.yml 사용
	 예> key:
	       key2:
	          key3:값
               xxx:
	          yyy:값

     바. boot 프로젝트 실행

          Run as > Spring Boot App 선택

#####################################################################################################

문법 정리

1. 빈 생성 ( boot 문서의 권장방법 )
  ==> 앞으로 생성할 빈들은 반드시 XXXApplication 이 가진 패키지의 하위 패키지로 만든다.

   com.example.
               XXXApplication ( main, @SpringBootApplication)
	       .service
	           -*.java ( @Sevice )
	        .dao
		   -*.java ( @Repository )

2. 의존성 설정 ( DI )

    가. @Autowired

    나. 생성자 이용 
      - 주입할 데이터타입을 파라미터로 가진 생성자 이용한다.
      - 프레임워크에서도 사용 가능 ( 4.3 이후 )
      - 기본생성자를 지정하면 안됨.(*****)

3. 생성된 빈 조회 방법

          ApplicationContext ctx	
	       = SpringApplication.run(DemoApplication.class, args);
	  
	  DeptServiceImpl service = ctx.getBean("xxx", DeptServiceImpl.class);
	  System.out.println(service.getMesg());

4. I18N
  - 다국어 구현
  가. 번들 파일 작성
   src/main/resource
     message폴더
      greeting-en.properties
      greeting-ko.properties
      greeting.properties ( 기본값, 필수 )
   
   나. application.properties 등록 ( 프레임워크에서는 xml에 등록 )

       spring.messages.basename=message/greeting
	spring.messages.encoding=utf-8
       spring.messages.fallback-to-system-locale=false

       true 지정: 시스템의 로케일을 따른다. ( 현재 PC 국가별 설정을 따른다. )
       false 지정: 기본 properties를 따른다.

   
    다. 사용.

       BeanFactory    MessageSource
           |            | 
	ApplicationContext 
	     |
	 GenericXmlApplicationContext
	 WebApplicationContext
          ..
      
         a. main메서드 가진 Application 에서 사용
            ApplicationContext ctx =SpringApplication.run(DemoApplication.class, args);
			
		  String mesg = ctx.getMessage("greet", 
				  new String[] {"하이~","~~~"},  Locale.CHINA);
		  System.out.println(mesg);

         b. 임의의 빈에서 사용

               @Autowird
	       MessageSource ctx;

	    * 프레임워크에서는  implements MessageSourceAware 하고 
		    @Override
		public void setMessageSource(MessageSource messageSource) {
			this.resources = messageSource;
		}

5. AOP ( Aspect Oriented Programming , 관점지향 프로그래밍 )
  1) 개념: 필수기능과 부가기능을 분리해서 필요할 때 부가기능을 주입 받아서 사용하자.

  2) 용어
     - 타겟파일: 필수기능을 구현한 빈
     - aspect: 부가기능을 구현한 빈
     - joinpoint: 부가기능(aspect)이 필수기능(target)에 주입하는 시점의미.
                  Spring에서는 메서드 호출 시점만 가능하다.
                  AOP 원천기술은 Spring 이전 기술로서 다양한 주입 시점이 있다.
		  (예> 메서드 호출시점, 객체생성시점, 변수값 변경시점,..... )

     - pointcut : 어떤 메서드 호출시 주입할 것인지 표현하는 표현식 의미.
     - advice   : 메서드 호출전: before advice
                        호출후: after advice
			정상실행후결과값리턴후: after returning advice
			예외발생후         : after throwing advice
			또는 4가지모두      : around advice

  3) AOP 의존성 설정
     
      *프레임워크  버전
        <dependency>
	    <groupId>org.aspectj</groupId>
	    <artifactId>aspectjweaver</artifactId>
	    <version>1.9.21</version>
	</dependency>
  
       * boot 버전 - starter로 제공
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-aop</artifactId>
	</dependency>

  4) AOP 활성화

      가. 프레임워크
          <!--  AOP 활성화 -->	
           <aop:aspectj-autoproxy />

      나. boot ( 자동활성화 )
         application.properties에서 비활성화 가능
	 spring.aop.auto=false  ( 기본: true )



6. DB 연동

  가. 프레임워크 버전
     -의존성 설정
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.33</version>
</dependency>		
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.4.6</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>1.3.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.0.8.RELEASE</version>
</dependency>
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-dbcp2</artifactId>
    <version>2.5.0</version>
</dependency>

   - jdbc.properties 에 4가지 정보 설정 ( key값의 임의의 값 )
        jdbc.driver=com.mysql.cj.jdbc.Driver
	jdbc.url=jdbc:mysql://localhost:3306/testdb?characterEncoding=UTF8
	jdbc.userid=root
	jdbc.passwd=root1234

    - xml 에 설정정보 추가
      jdbc.propertiest등록
      BasicDataSource 등록
      TransactionManager등록 (명시적 등록필수) + @Transactional
      SqlSessionFactoryBean 등록 ( Mapper와 DTO 별칠 등록 )
      SqlSessionTemplate 등록

     - DAO, Service 작성

  나. boot 버전
    - 의존성

<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.33</version>
</dependency>	
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.4</version>
</dependency>
 <!-- HiKariCP DBCP 내부적으로 사용 -->

    - DTO 작성
      @Alias("별칭")

    - appllication.properties 에 4가지 정보 설정 ( 정해진 key값 이용)
        spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/testdb?useUnicode=true&serverTimezone=Asia/Seoul
	spring.datasource.username=root
	spring.datasource.password=1234

    
    - appllication.properties 이외 작업
       
       # mapper 등록
	mybatis.mapper-locations=com/config/*Mapper.xml

       # dto 별칭 등록
	mybatis.type-aliases-package=com.example.dto
 
     - DAO, Service 작성

     - TransactionManager 자동등록되어 있기 때문에
       @Transactional 만 서비스에서 사용하면 트랜잭션 처리가 된다.
#######################################################################
7. SpringMVC

    가. 웹 개발 의존성 ( starter-web 의존성 )
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>
	</dependency>

	- tomcat 자동내장 ( 기본port: 8080 )
	- jackson-databind 포함
	- fileupload 의존성 포함
	 ...
 
    나. 기본 웹 구조가 자동으로 제공안됨.

        기존 프레임워크에서 제공된 구조가 제공 안됨. 필요하면 명시적으로 작성
	src/main
	      webapp
	       -WEB-INF
	           -lib
		   -views
		      - hello.jsp
		   

     다. jsp 가 기본 화면 template이 아니다. 
        즉 jsp의 의존성이 자동으로 추가되지 않음.
	따라서 필요하면 의존성을 추가해야 된다.
	boot가 권장하는 화면 template thymeleaf(*.html) 이다.
        <dependency>
	    <groupId>org.apache.tomcat.embed</groupId>
	    <artifactId>tomcat-embed-jasper</artifactId>
	</dependency>
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
	</dependency>

      라. jsp의 경로 설정
         이전 프레임워크에서는 xml에 설정
     <!-- jsp 전담 ViewResolver -->
    <bean id="jsp" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <property name="prefix" value="/WEB-INF/views/" /> 
      <property name="suffix" value=".jsp" /> 
    </bean>

         applicaton.properties에 jsp 경로 설정
	 # jsp 경로 설정
	spring.mvc.view.prefix=/WEB-INF/views/
	spring.mvc.view.suffix=.jsp

      마. tomcat 포트 변경

          server.port=8090


       바. context 명 변경

         요청 url: http://localhost:8090/컨텍스트명/요청매핑값

         # context 명 변경
	 server.servlet.context-path=/app

       사. Controller 작성
         이전 프레임워크 문법과  동일.


8. js,css,image 리소드 설정

    가. 이전 프레임워크
        webapp
	   WEB-INF
	      js
	         *.js
	      css
	         *.css
	      images
	          *.png
	      views
	           *.jsp

    <!-- 정적자원 경로 지정 -->
    <mvc:resources location="/WEB-INF/css/" mapping="/css/**" />	
    <mvc:resources location="/WEB-INF/js/" mapping="/js/**" />	
    <mvc:resources location="/WEB-INF/images/" mapping="/images/**" />	


    나.  boot 

        src/main/resource
	    static 폴더에 저장하면 자동인식되어 사용가능


	    static
	       js
	         *.js
	       css
	          *.css



9. 파일업로드

   가. 이전 프레임워크
       -의존성 설정
<dependency>
    <groupId>commons-fileupload</groupId>
    <artifactId>commons-fileupload</artifactId>
    <version>1.5</version>
</dependency>
<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
<dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <version>2.15.1</version>
</dependency>

	-xml에 resolver 등록
	 <!-- MultipartResolver 등록 -->
    <bean id="multipartResolver" 
         class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
      <property name="maxUploadSizePerFile" value="1024*1024*2"></property>
    </bean>

       - 화면작성
         <form method="post"
	      enctype="multipart/form-data">

       - DTO 작성
      public class UploadDTO {

	String theText;
	CommonsMultipartFile theFile;

       - Controller 작성
         @PostMapping("/upload")
	public String upload(UploadDTO dto, Model m) {
		
	   String theText = dto.getTheText();
	   CommonsMultipartFile theFile = dto.getTheFile();
        - post 요청이기 때문에 web.xml 에  CharacterEncodingFilter 등록해야 된다. ( 한글처리 )
   나.  boot
       - 의존성 설정 불 필요 ( starter-web 에 의존성이 포함 )
       - 업로드 활성화/비활성화 설정
       - 업로드 파일크기 설정
	spring.servlet.multipart.enabled=true
	spring.servlet.multipart.max-file-size=2M
	spring.servlet.multipart.max-request-size=10M
       - 화면작성
         <form method="post"
	      enctype="multipart/form-data">

        - DTO 작성
	  public class UploadDTO {

		String theText;
		MultipartFile theFile;
	   // CommonsMultipartFile 안됨.

       - Controller 작성

           @PostMapping("/upload")
	public String upload(UploadDTO dto, Model m) {
		
	    String theText = dto.getTheText();
	    MultipartFile theFile = dto.getTheFile();
        
        - POST 요청에 대한 한글처리 자동 지원됨.


10. HandlerInterceptor

   가. 이전 프레임워크
        - 의존성 추가 없음
        - MyHandlerInterceptor extends HandlerInterceptorAdapter
	  하고 필요한 메서드 재정의.
        - xml에 등록
	   <mvc:interceptors>
	     <mvc:interceptor>
	       <mvc:mapping path="/loginCheck/*"/>
		<ref bean="xxx"/>
	     </mvc:interceptor>
	    </mvc:interceptors>
	
   나. boot
        - 의존성 추가 없음
	- extends HandlerInterceptorAdapter 는 deprecated 됨.
	 대신  implements HandlerInterceptor 해야된다.
	 그리고 필요한 메서드만 재정의한다.

         - Configuration 설정빈에 등록

     @Configuration
     public class WebConfig implements WebMvcConfigurer {

	@Autowired
	MyHandlerInterceptor xxx;
	
	
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		registry.addInterceptor(xxx)
		        .addPathPatterns("/login","/mypage");
	}

##########################################################################
11. profile

    가. 이전 프레임워크 ( xml 파일명을 내마음대로 지정 가능 )
        - user_dev.xml  ==> 개발버전
	     <beans profile="dev">
	  user_prod.xml ==> 배포버전
              <beans profile="prod">


        - ApplicationContext에서 xml 등록후 active profile 지정
          ctx.getEnvironment().setActiveProfiles("prod");  //dev, prod
	   ctx.load("classpath:user-dev.xml", "classpath:user-prod.xml");
	   ctx.refresh();  

    나. boot
        - applicaton.properties ( 이름이 정해져 있음 )
	     active profile 지정

          applicaton-dev.properties
	  applicaton-prod.properties
    


12. @Value

   application.properties에 설정된 값을 얻을 수 있다.
   xxx=1234

   Controller 에서

      @Value("${xxx}")
      String value;

13. yml
 
   boot 에서 사용한 configuration 설정 파일 2가지

   가. application.properties
       예> key.key2.key3=값

   나. application.yml
       예> key:
             key2:
	        key3:값

14. JSON 처리
               JSON --------->java ( @RequestBody )
     브라우저  -------------------> Controller
             <------------------
                 json<------java ( @ResponseBody )


    가. 이전 프레임워크
          -의존성 추가
                <dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-databind</artifactId>
		    <version>2.14.2</version>
		</dependency>
          - 어노테이션 필요
	      
	      JSON-----> Java  @RequestBody
	      Java ----> JSON  @ResponseBody

           - @RequestBody 와 @ResponseBody 활성화
                  <mvc:annotation-driven />
		  <mvc:default-servlet-handler/>


    나.  boot
         - 자동으로 의존성 추가 ( starter-web )
	  - 어노테이션 필요
	      
	      JSON-----> Java  @RequestBody
	      Java ----> JSON  @ResponseBody  

          - @RequestBody 와 @ResponseBody 자동 활성화
#########################################################
lombok 사용
  가. c:\lombok.jar 저장
  나. 의존성 설정
  다. lombok.jar 실행
    cmd 창에서
    c:\>java -jar lombok.jar  엔터
  라. 실행된 화면에서 location 선택하고
     사용하고자 하는 sts의 sts.exe 선택하고 install/update 클릭한다.

#########################################################
15. 게시판 구현
   
   가. 프로젝트 생성
     boot_07_board

   나. board 테이블 작성
     
       create table board
       ( num integer primary key  auto_increment,
         title varchar(50) not null,
	 author varchar(50) not null,
	 content varchar(500) not null,
	 writeday date default ( now() ),
	 readcnt integer default 0 );
 
      insert into board ( title, author, content )
      values ( '실습','홍길동','내용무');
      commit;

    다. 환경설정

       - 의존성 설정
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>
	</dependency>

       <dependency>
	    <groupId>org.apache.tomcat.embed</groupId>
	    <artifactId>tomcat-embed-jasper</artifactId>
	</dependency>
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
	</dependency>
        <dependency>
	    <groupId>mysql</groupId>
	    <artifactId>mysql-connector-java</artifactId>
	    <version>8.0.33</version>
	</dependency>	
	<dependency>
	    <groupId>org.mybatis.spring.boot</groupId>
	    <artifactId>mybatis-spring-boot-starter</artifactId>
	    <version>2.1.4</version>
	</dependency>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
	</dependency>
	 <dependency>
		<groupId>org.projectlombok</groupId>
		<artifactId>lombok</artifactId>
	</dependency>

    라. BoardDTO.java 작성 ( lombok 이용 )

        @Alias("BoardDTO");
	public class BoardDTO{}

    마. mapper 작성

        src/main/resource/
	       com.config.mapper
	              BoardMapper.xml


     바. application.properties DB 연동 설정
       # mysql 연동하기 위한 4가지 정보 설정
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/testdb?useUnicode=true&serverTimezone=Asia/Seoul
	spring.datasource.username=root
	spring.datasource.password=root1234


	# mapper 등록
	mybatis.mapper-locations=com/config/*Mapper.xml
	# dto 별칭 등록
	mybatis.type-aliases-package=com.example.dto

     사. DAO 와 Service , Controller 작업

 ////////////////////////////////////////
 // 페이징 처리
 ///////////////////////////////////////

 1. 필요한 정보?

    List<BoardDTO> list;  // 한페이지에 보여줄 데이터

    int totalCount;   // 전체 레코드 갯수
    int perPage=3;     // 페이지당 보여줄 레코드 갯수
    int curPage;       // 페이지 번호

   위의 4개의 정보는 PageDTO에 저장한다.


2. sql문 정렬 (내림차순)

   order by num desc


##################################
#################################
1. thymeleaf
 
   - 화면처리 기술이다. ( html, jsp, velocity, .... )
   - springframework은 거의 jsp 로 처리함.
   - springboot 는 jsp 권장안함. thymeleaf 권장.

   - http://www.thymeleaf.org 참조

   - 의존성 추가
                <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

   - 확장자는 html 이고 
     src/main/resource/templates 폴더에 저장한다.


    - html의 <html xmlns:th="http://www.thymeleaf.org"> 설정하고
      시작태그에서 th:xxx="값" 형식으로  사용한다.

2. REST 서비스

    가. 이전 서비스 (SOAP)

       특징
         - 요청 method: get/post
	     get:검색 (select)
	     post:생성,수정,삭제 (DML) ==> 서버의 데이터가 변경될 수 있는 작업인 경우에 post로 요청한다.

	 - 서버로 파라미터 전달하는 일반적인 방법: query string ( URL에 포함안됨 )
	   예> http://localhost:8090/app/retrieve?num=2
              http://localhost:8090/app/delete?num=2
             ==> URL에 기능을 명시해서 정보를 표현한다.
           
	  - query string 값 얻기 위한 방법? @RequestParam 이용

          - 응답 처리 2가지
	      a. JSP 반환 ( 화면이 존재함 )
	      b. Ajax 이용해서 JSON 반환 ==> @ResponseBody 
                                          @RequestBody

    나. REST 서비스

        특징
	  -요청 method: get/post/put/delete/
	               patch/option

	    	get:검색 (select)	
                post:생성 (insert)
	        put:생성 (update)
                delete:생성 (delete)


           - 서버로 파라미터전달시 URL 포함하여 전달함.
	    
	    예> http://localhost:8090/app/2 + 어떤 동작할지는 요청 method로 알려준다.

               GET http://localhost:8090/app/2
	       PUT http://localhost:8090/app/2
	       DELETE http://localhost:8090/app/4
 
            - URL에 포함된 값을 얻기 위한 방법? @PathVariable
	    - 응답 처리 1가지
                    JSON 요청하고 반환

		             JSON
		브라우저 -------------------> Controller
		       <-------------------
		             JSON    ==========> 모든 Controller(@Controller)  메서드에 @ResponseBody 
			             ==========> 한방에 할 수 있는 방법 ( @Controller + @ResponseBody 결합)은
				                 @RestController 이다.

						
	     - 등장 배경?
	      
	       클라이언트가 너무 다양해짐.

	       pc의 브라우저가 대부분이었는데
	       현재는 핸드폰, 태블릿, TV, ......

	      - REST 개발시 사용 가능한 툴?
	         postman (GUI 툴 )
		 curl ( CUI 툴 )
		 Swagger 라이브러리 ( 웹 dashboard 제공 )


              - 응답처리 패턴
	       
	          ResponseEntity 클래스 저장 ( 상태값, 응답데이터 )


3. Swagger3 ( SpringBoot 2.6 이상 )

   가. 의존성 설정
     <dependency>
	    <groupId>io.springfox</groupId>
	    <artifactId>springfox-boot-starter</artifactId>
	    <version>3.0.0</version>
    </dependency>

   나. 요청하는 Controller 등록 가능한 빈 생성

      @Configuration
@EnableWebMvc
public class SwaggerConfig {
	
	@Bean
	public Docket api() {
		return new Docket(DocumentationType.OAS_30)
				.useDefaultResponseMessages(false)
				.select()
				.apis(RequestHandlerSelectors
						.basePackage("컨트롤러패키지지정"))
				.paths(PathSelectors.any())
				.build();
	}
}

   다. 요청

      a. Controller에 요청


      b. Swagger 에 요청
      http://localhost:8090/컨텍스트/swagger-ui/index.html
      
      http://localhost:8090/app/swagger-ui/index.html


##################################
#################################
3. Spring Security

  가. 개요
  Spring기반 프로젝트 개발시 사용자의 인증(Authentication)과 
  권한(Authorization) 처리를 담당하여  리소스의 접근 제어를 가능하게 도와준다.
  Spring 의 서브 프로젝트이다.
  필터(filter) 기반이다.

   브라우저 -------필터1--필터2------------------> Controller ( 보호 X )

           -------필터1--필터2------------------> Controller ( 보호 0 )

   나. 용어

     -Principal : 접근 주체 ( 사용자 )==> id 의미
     -Credencial : => pw 의미
     -secured resource: 보안이 적용되는 리소스 의미 ( 인증 및 인가 필요 )
     -Authentication(인증): Principal 가 믿을 수 있는지 확인하는 작업
                           예> ID/PW 이용한 로그인 
     -Authorization(인가,권한): 인증이 완료된 Principal의 어떤 행위를 할 권한이 있는지 확인
                              ROLE 이용
			      예> 관리자, 사용자
    
   * spring security authentication architecture


4. 실습 순서

 가.  boot_inky_security1_적용전_제공파일
     - Spring Security 적용전 코드
     - 아무나 접근할 수 있다.

 나. boot_inky_security2_인증Filter추가
    - 의존성 추가
    <dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
    </dependency>
   
    실습: 의존성만 추가했음에도 불구하고 브라우저에서 Controller 요청시
      Spring Security가 제공해준 로그인이 보여진다. 지금부터 인증작업이 시작됨.
      console에는 임시 암호화된 비번이 제공된다. ( 반드시 비번을 암호화해서 저장해야 된다. )

    - 어떤 요청을 허용하고 허용안할지 결정
     
       SecurityConfig 빈을 이용해서 SecurityFilterChain 생성.

      @Configuration
public class SecurityConfig {

	@Bean  // 객체생성
	public SecurityFilterChain filterChain(HttpSecurity http)throws Exception{
		System.out.println("SecurityConfig.filterChain");
		
		//누구 허용할지 안할지 결정 
		// 허용할 페이지: /signup, /login
		
		http
			.authorizeRequests()
				.antMatchers("/login","/signup").permitAll()
				.anyRequest().authenticated();
		
		
		
		return http.build();
	}
}

   실행결과: 웹브라우저 close 한후 실습
          login과 signup 요청시 제대로 화면에 나옴.
	  다른 요청은 403 forbidden 예외가 발생됨.

       - 허용하지 않은 사용자을 위한 로그인 화면 설정

       // 로그인 화면 설정
		http
			.formLogin()
				.loginPage("/login") // 로그인 화면설정 ==> id와 pw입력, loginPage.jsp 반드시 post
				.loginProcessingUrl("/auth")// 입력한 id와 pw를 체크할 Security 빈. 반드시 post요청
				.usernameParameter("email")  // 로그인 화면에서 입력한  id값
				.passwordParameter("password")// 로그인 화면에서 입력한  pw값
				.defaultSuccessUrl("/");   // 로그인 성공후 보여줄 타겟

   실습결과:
          /login과 /signup 이외의 요청은
	 .formLogin()의 .loginPage("/login") 의해서 loginPage.jsp 로 간다.
	 아직 비번이 암호화 안된 상태이기 때문에 로그인은 안됨.

       - 로그아웃 처리
         로그아웃 처리는 자동으로 해줌.

    다. boot_inky_security3_비번암호화및인증처리

        - 회원가입시 비번 암호화
	   //암호화
	    private final PasswordEncoder passwordEncoder =
			new BCryptPasswordEncoder();
	        public PasswordEncoder passwordEncoder() {
    		 return passwordEncoder;
		}
	    public void signup(UserDTO userVo) { // 회원 가입
	    
		String pw = userVo.getPassword(); // 1234
		userVo.setPassword(passwordEncoder.encode(pw)); // 암호화된 1234
	 
		userMapper.insertUser(userVo);
		
	    }
          - 회원수정시 비번 암호화
	  public void edit(UserDTO userVo) { // 회원 정보 수정
		String pw = userVo.getPassword(); // 1234
		userVo.setPassword(passwordEncoder.encode(pw)); // 암호화된 1234
		userMapper.updateUser(userVo);
	    }

	 - 입력된 id/pw 이용해서 인증처리 작업처리 빈 생성
package com.example.auth;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import com.example.dto.UserDTO;
import com.example.service.UserService;

@Component
public class AuthProvider implements AuthenticationProvider {
    @Autowired
    private UserService userService;

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
    	System.out.println("AuthProvider.authenticate");
        String email = (String) authentication.getPrincipal(); // 로그인 창에 입력한 email 
        String password = (String) authentication.getCredentials(); // 로그인 창에 입력한 password

        //DB에 저장된 사용자 정보 얻기
        PasswordEncoder passwordEncoder = userService.passwordEncoder();    
        UserDTO userVo = userService.getUserByEmail(email);

        UsernamePasswordAuthenticationToken token;
        
        if (userVo != null && passwordEncoder.matches(password, userVo.getPassword())) { // 일치하는 user 정보가 있는지 확인
            List<GrantedAuthority> roles = new ArrayList<>();
            roles.add(new SimpleGrantedAuthority("USER")); // 권한 부여 (ROLE_USER) 

            token = new UsernamePasswordAuthenticationToken(userVo.getId(), null, roles); 
            // 인증된 user 정보를 담아 SecurityContextHolder에 저장되는 token
            return token;
        }
        throw new BadCredentialsException("No such user or wrong password."); 
        // Exception을 던지지 않고 다른 값을 반환하면 authenticate() 메서드는 정상적으로 실행된 것이므로 인증되지 않았다면 Exception을 throw 해야 한다.
    }

    @Override
    public boolean supports(Class<?> authentication) {
        return true;
    }
}

   실행결과:
        lee@naver.com/1234
	hong@daum.net/1234  입력후 로그인하면 정상적으로 처리됨.

	이외의 입력후 /로 리다이렉트됨.
     


        - 실패후 화면처리와 성공후 화면처리

	// 로그인 실패 했을 때 화면
	.failureForwardUrl("/login_fail") // @PostMapping으로 지정필수
	// 로그인 성공후 보여줄 타겟
	// true로 지정하면 바로 타겟으로 감. 기본은 false이면 이전 URL 로 감.
	.defaultSuccessUrl("/login_success", true); 


	- 로그인 성공화면에서 보여줄 메시지

	  예> 안녕하세요. 홍길동 님

	  ==>jsp에서 security 태그 사용하기 위한 의존성 추가
           <dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-taglibs</artifactId>
	  </dependency>
	   <sec:>

          ==> AuthProvider 수정
	  token = new UsernamePasswordAuthenticationToken(userVo.getId(), null, roles); 
	  token = new UsernamePasswordAuthenticationToken(userVo, null, roles); 